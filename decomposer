#!/bin/bash

CWD=$( pwd )
TARGET_DIR=${TARGET_DIR:-/var/www/libs/}
SCRIPT_NAME=${0##*/}

usage() {
  cat << EOF
usage: ${SCRIPT_NAME} <command>

Manage a PHP project libraries
Rely on decomposer.json file in working directory

Commands:
  install    install all the libraries
             and generate an include file
  develop    same as install
             add an extra check to error out if include file is outdated
  help       display this message
EOF
}

error() {
  [[ -z "$1" ]] || printf '%s: %s\n' "${SCRIPT_NAME}" "$1"
  printf "Try '%s help' for more information.\\n" "${SCRIPT_NAME}"
  exit 1
} >&2

decomposer_install() {
  local library=$1
  local file=$2

  local url=$( jq -r ".\"${library}\".url" "${file}" )
  local version=$( jq -r ".\"${library}\".version" "${file}" )
  local sub_dir=$( jq -r ".\"${library}\".\"target-dir\"" "${file}" )

  printf 'Installing %s...' "${library}"

  if [ "${sub_dir}" == 'null' ]; then
    local library_target_dir="${library}-${version}"
  else
    local library_target_dir="${library}-${version}${sub_dir}"
  fi

  cd "${TARGET_DIR}"

  if ! [ -d "${library}-${version}" ]; then
    git clone "${url}" "${library_target_dir}" &> /dev/null

    if ! [ "$?" = 0 ]; then
      printf "failed (cloning git repository failed)\\n"
      return
    fi
  fi

  if ! [ -h "${library}-${version}" ]; then
      cd "${library_target_dir}"

      if ! [ -f '.git' ]; then
        if [ "$( jq ".\"${library}\"|has(\"revision\")" "${file}" )" = 'true' ]; then
          local revision=$( jq -r ".\"${library}\".revision" "${file}" )
        else
          local revision="${version}"
        fi

        git fetch origin &> /dev/null

        local rev_origin=$( git branch -a | grep "/origin/${revision}" )

        if [ -z "${rev_origin}" ]; then
          local git_type=$( git cat-file -t "${revision}" 2> /dev/null )
          local git_alt_type=$( git cat-file -t "v${revision}" 2> /dev/null )
        else
          local git_type=$( git cat-file -t "origin/${revision}" 2> /dev/null )
          local git_alt_type=$( git cat-file -t "v${revision}" 2> /dev/null )
        fi

        local rev_head=$( git rev-parse HEAD )

        if [ "${git_type}" = 'commit' -o "${git_type}" = 'tag' ]; then
          if ! [ -z "${rev_origin}" ]; then
            if ! [ "${rev_head}" = "$( git rev-parse "origin/${revision}" )" ]; then
              git reset --hard "origin/${revision}" &> /dev/null
            fi
          elif ! [ "$rev_head" = "$( git rev-parse "${revision}" )" ]; then
            git reset --hard "${revision}" &> /dev/null
          fi
        elif [ "${git_alt_type}" = 'commit' -o "${git_alt_type}" = 'tag' ]; then
          if ! [ "${rev_head}" = "$( git rev-parse "v${revision}" )" ]; then
            git reset --hard "v${revision}" &> /dev/null
          fi
        else
          printf "failed (revision '%s' not found)\\n" "${revision}"
          return
        fi
      fi

    cd "${TARGET_DIR}"
  fi

  if [ "$( jq ".\"${library}\"|has(\"psr0\")" "${file}" )" = 'true' ]; then
    local psr0_path=$( jq -r ".\"${library}\".psr0.path" "${file}" )

    cat << EOF > "${library}-${version}.php"
<?php

set_include_path(
    get_include_path() . ':' .
    __DIR__ . '/${library_target_dir}${psr0_path}'
);

?>
EOF
  elif [ "$( jq ".\"${library}\"|has(\"psr4\")" "${file}" )" = 'true' ]; then
    local psr4_prefix=$( jq -r ".\"${library}\".psr4.prefix" "${file}" )
    local psr4_path=$( jq -r ".\"${library}\".psr4.\"search-path\"" "${file}" )

    cat << EOF > "${library}-${version}.php"
<?php

autoload_register_psr4_prefix('${psr4_prefix}', '${library_target_dir}${psr4_path}');

?>
EOF
  fi

  printf 'done\n'
}

decomposer_process_file() {
  local file=$1
  local libraries=$( jq -r ".|to_entries|map(\"\(.key|tostring)\")|.[]" "${file}" )

  for library in ${libraries}; do
    decomposer_install "${library}" "${file}"
  done
}

md5checksum() {
  local file="$1"

  case "$( uname )" in
    'Linux')
      md5sum "${file}" | cut -f1 -d' '
      ;;
    'Darwin')
      md5 -q "${file}"
      ;;
  esac
}

decomposer_create_autoload() {
  local file=$1
  local develop=$2
  local libraries=$( jq -r ".|to_entries|map(\"\(.key|tostring)\")|.[]" "${file}" )
  local autoload="${CWD}/decomposer.autoload.inc.php"

  printf '<?php\n\n' > "${autoload}"

  if [ "${develop}" = 'develop' ]; then
    local md5=$( md5checksum "${CWD}/decomposer.json" )

    cat << EOF >> "${autoload}"
if (md5_file(__DIR__ . '/decomposer.json') != '${md5}')
{
    die("Decomposer autoload file is outdated. Please re-run 'decomposer develop'
");
}

EOF
  fi

  for library in ${libraries}; do
    local version=$( jq -r ".\"${library}\".version" "${file}" )

    printf "require_once '%s-%s.php';\\n" "${library}" "${version}" >> "${autoload}"
  done

  printf '\n?>\n' >> "${autoload}"
}

COMMAND="$1"

case "${COMMAND}" in
  'install')
    if ! [ -f "${CWD}/decomposer.json" ]; then
      error 'No decomposer.json found.'
    fi

    decomposer_process_file "${CWD}/decomposer.json"
    decomposer_create_autoload "${CWD}/decomposer.json"
    ;;
  'develop')
    if ! [ -f "${CWD}/decomposer.json" ]; then
      error 'No decomposer.json found.'
    fi

    decomposer_process_file "${CWD}/decomposer.json"
    decomposer_create_autoload "${CWD}/decomposer.json" 'develop'
    ;;
  'help')
    usage
    exit
    ;;
  '')
    error 'Missing command'
    ;;
  *)
    error 'Invalid command'
esac
