#!/bin/bash

CWD=$(pwd)
TARGET_DIR=${TARGET_DIR:-/var/www/libs/}
SCRIPT_NAME=${0##*/}

usage() {
cat << EOF
usage: ${SCRIPT_NAME} <command> [<library>...]

Commands:
  install    install the libraries
             only the specified ones if any, all otherwise
  help       display this message
EOF
}

decomposer_collect_dependencies() {
FILE=$1
PACKAGES=$(jq -r ".|to_entries|map(\"\(.key|tostring)\")|.[]" "$FILE")

for PACKAGE in $PACKAGES; do
  VERSION=$(jq -r ".\"$PACKAGE\".version" "$FILE")
  if [ -f "$TARGET_DIR/$PACKAGE-$VERSION/decomposer.json" ]; then
    DECOMPOSER_FILES+="$TARGET_DIR/$PACKAGE-$VERSION/decomposer.json "
    decomposer_collect_dependencies "$TARGET_DIR/$PACKAGE-$VERSION/decomposer.json"
  fi
done
}

decomposer_install() {
PACKAGE=$1
FILE=$2

if ! [ $(jq ".|has(\"$PACKAGE\")" "$FILE") = "true" ]; then
  echo "Package '$PACKAGE' not found!"
  return
fi

URL=$(jq -r ".\"$PACKAGE\".url" "$FILE")
VERSION=$(jq -r ".\"$PACKAGE\".version" "$FILE")
SUB_DIR=$(jq -r ".\"$PACKAGE\".\"target-dir\"" "$FILE")
for INSTALLED in $INSTALLED_PACKAGES; do
  if [ "$INSTALLED" = "$PACKAGE-$VERSION" ]; then
    return
  fi
done

echo -n "Installing $PACKAGE..."

cd "$TARGET_DIR"

if ! [ -d "$PACKAGE-$VERSION" ]; then
  if [ "$SUB_DIR" == "null" ]; then
    git clone "$URL" "$PACKAGE-$VERSION" &> /dev/null
  else
    git clone "$URL" "$PACKAGE-$VERSION$SUB_DIR" &> /dev/null
  fi

  if ! [ "$?" = 0 ]; then
    echo "Cloning git repository for '$PACKAGE' failed!"
    return
  fi
fi

if ! [ -h "$PACKAGE-$VERSION" ]; then
  if [ "$SUB_DIR" == "null" ]; then
    cd "$PACKAGE-$VERSION"
  else
    cd "$PACKAGE-$VERSION$SUB_DIR"
  fi
    if ! [ -f ".git" ]; then
      if [ $(jq ".\"$PACKAGE\"|has(\"revision\")" "$FILE") = "true" ]; then
        REVISION=$(jq -r ".\"$PACKAGE\".revision" "$FILE")
      else
        REVISION=$VERSION
      fi

      GIT_TYPE=$(git cat-file -t "$REVISION" 2> /dev/null)
      GIT_ALT_TYPE=$(git cat-file -t "v$REVISION" 2> /dev/null)

      REV_HEAD=$(git rev-parse HEAD)

      git fetch origin &> /dev/null

      if [ "$GIT_TYPE" = "commit" -o "$GIT_TYPE" = "tag" ]; then
        if ! [ "$REV_HEAD" = "$(git rev-parse $REVISION)" ]; then
          git reset --hard "$REVISION" &> /dev/null
        fi
      elif [ "$GIT_ALT_TYPE" = "commit" -o "$GIT_ALT_TYPE" = "tag" ]; then
        if ! [ "$REV_HEAD" = "$(git rev-parse "v$REVISION")" ]; then
          git reset --hard "v$REVISION" &> /dev/null
        fi
      else
        echo "Revision $REVISION not found"
        return
      fi
    fi
  cd $TARGET_DIR
fi

echo -e "<?php\n" > "$PACKAGE-$VERSION.php"

if [ "$PACKAGE" = "Lunr" ]; then
  echo "require_once '$PACKAGE-$VERSION/src/Lunr/Core/Autoloader.php';" >> "$PACKAGE-$VERSION.php"
  echo "\$autoloader = new Lunr\Core\Autoloader();" >> "$PACKAGE-$VERSION.php"
  echo -e "\$autoloader->register();\n" >> "$PACKAGE-$VERSION.php"
fi

if [ $(jq ".\"$PACKAGE\"|has(\"psr0\")" "$FILE") = "true" ]; then
  PSR0_PATH=$(jq -r ".\"$PACKAGE\".psr0.path" "$FILE")

  echo "set_include_path(" >> "$PACKAGE-$VERSION.php"
  echo "    get_include_path() . ':' ." >> "$PACKAGE-$VERSION.php"
  echo "    __DIR__ . '/${PACKAGE}-${VERSION}${PSR0_PATH}'" >> "$PACKAGE-$VERSION.php"
  echo -e ");\n" >> "$PACKAGE-$VERSION.php"
fi

if [ $(jq ".\"$PACKAGE\"|has(\"includes\")" "$FILE") = "true" ]; then
  INCLUDES=$(jq -r ".\"$PACKAGE\".includes|to_entries|map(\"\(.value|tostring)\")|.[]" "$FILE")

  for i in $INCLUDES; do
    echo -e "include_once '$i.php';" >> "$PACKAGE-$VERSION.php"
  done

  echo "" >> "$PACKAGE-$VERSION.php"
fi

if [ $(jq ".\"$PACKAGE\"|has(\"psr4\")" "$FILE") = "true" ]; then
  PSR4_PREFIX=$(jq -r ".\"$PACKAGE\".psr4.prefix" "$FILE")
  PSR4_PATH=$(jq -r ".\"$PACKAGE\".psr4.\"search-path\"" "$FILE")

  echo -e "\$autoloader->set_prefix('$PSR4_PREFIX', '${PACKAGE}-${VERSION}${PSR4_PATH}');\n" >> "$PACKAGE-$VERSION.php"
fi

echo "?>" >> "$PACKAGE-$VERSION.php"

echo "done"

INSTALLED_PACKAGES+="$PACKAGE-$VERSION "
}

decomposer_process_file() {
FILE=$1
PACKAGES=$(jq -r ".|to_entries|map(\"\(.key|tostring)\")|.[]" "$FILE")

for package in $PACKAGES; do
  decomposer_install $package "$FILE"
done
}

COMMAND="$1"
SELECTIVE="${@:2}"

case "$COMMAND" in
  "install")
    if ! [ -f "$CWD/decomposer.json" ]; then
      echo "No decomposer.json found."
      exit 1
    fi

    DECOMPOSER_FILES=""
    decomposer_collect_dependencies "$CWD/decomposer.json"

    if [ -z "$SELECTIVE" ]; then
      INSTALLED_PACKAGES=""
      decomposer_process_file "$CWD/decomposer.json"

      for JSON in $DECOMPOSER_FILES; do
        PACKAGE=${JSON#$TARGET_DIR/}
        PACKAGE=${PACKAGE%/decomposer.json}
        echo -e "\nInstalling dependencies for '$PACKAGE':"
        decomposer_process_file "$JSON"
      done
    else
      DECOMPOSER_FILES="$CWD/decomposer.json $DECOMPOSER_FILES"

      for PACKAGE in $SELECTIVE; do
        for JSON in $DECOMPOSER_FILES; do
          if [ $(jq ".|has(\"$PACKAGE\")" "$JSON") = "true" ]; then
            decomposer_install $PACKAGE "$JSON"
            break
          fi
        done
      done
    fi
    ;;
  'help')
    usage
    exit
    ;;
  '')
    echo "Missing command!"
    exit 1
    ;;
  *)
    echo "Invalid command!"
    exit 1
esac
